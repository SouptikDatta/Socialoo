{"ast":null,"code":"import _slicedToArray from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs'; // CLASS\n\nvar QueryCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryCache, _Subscribable);\n\n  var _super = _createSuper(QueryCache);\n\n  function QueryCache(config) {\n    var _this;\n\n    _classCallCheck(this, QueryCache);\n\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.queries = [];\n    _this.queriesMap = {};\n    return _this;\n  }\n\n  _createClass(QueryCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var _options$queryHash;\n\n      var queryKey = options.queryKey;\n      var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n      var query = this.get(queryHash);\n\n      if (!query) {\n        query = new Query({\n          cache: this,\n          logger: client.getLogger(),\n          queryKey: queryKey,\n          queryHash: queryHash,\n          options: client.defaultQueryOptions(options),\n          state: state,\n          defaultOptions: client.getQueryDefaults(queryKey)\n        });\n        this.add(query);\n      }\n\n      return query;\n    }\n  }, {\n    key: \"add\",\n    value: function add(query) {\n      if (!this.queriesMap[query.queryHash]) {\n        this.queriesMap[query.queryHash] = query;\n        this.queries.push(query);\n        this.notify({\n          type: 'added',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(query) {\n      var queryInMap = this.queriesMap[query.queryHash];\n\n      if (queryInMap) {\n        query.destroy();\n        this.queries = this.queries.filter(function (x) {\n          return x !== query;\n        });\n\n        if (queryInMap === query) {\n          delete this.queriesMap[query.queryHash];\n        }\n\n        this.notify({\n          type: 'removed',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n\n      notifyManager.batch(function () {\n        _this2.queries.forEach(function (query) {\n          _this2.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(queryHash) {\n      return this.queriesMap[queryHash];\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.queries;\n    }\n  }, {\n    key: \"find\",\n    value: function find(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n          filters = _parseFilterArgs2[0];\n\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n\n      return this.queries.find(function (query) {\n        return matchQuery(filters, query);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n          filters = _parseFilterArgs4[0];\n\n      return Object.keys(filters).length > 0 ? this.queries.filter(function (query) {\n        return matchQuery(filters, query);\n      }) : this.queries;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (_ref) {\n          var listener = _ref.listener;\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this4 = this;\n\n      notifyManager.batch(function () {\n        _this4.queries.forEach(function (query) {\n          query.onFocus();\n        });\n      });\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.queries.forEach(function (query) {\n          query.onOnline();\n        });\n      });\n    }\n  }]);\n\n  return QueryCache;\n}(Subscribable);\n\nexport { QueryCache };","map":{"version":3,"mappings":"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","names":["QueryCache","constructor","config","queries","queriesMap","build","client","options","state","queryKey","queryHash","hashQueryKeyByOptions","query","get","Query","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","notifyManager","batch","forEach","getAll","find","arg1","arg2","parseFilterArgs","filters","exact","matchQuery","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline","Subscribable"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\query-core\\src\\queryCache.ts"],"sourcesContent":["import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type { NotifyEvent, QueryKey, QueryOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: unknown | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}