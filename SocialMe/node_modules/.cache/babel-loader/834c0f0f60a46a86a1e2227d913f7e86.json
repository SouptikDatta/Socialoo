{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91987\\\\Desktop\\\\Socialoo\\\\client\\\\src\\\\context\\\\darkModeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\"; //creating a context API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DarkModeContext = /*#__PURE__*/createContext(); //to use the context API we need this below provider to wrap our application in app.js\n\nexport const DarkModeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem(\"darkMode\")) || false); //JSON.parse will return false as boolean not a string\n  //localStorage to check if it was visited before just take value darkMode\n\n  const toggle = () => {\n    setDarkMode(!darkMode);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"darkMode\", darkMode); //everytime it changes darkMode it just set in localStorage again\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(DarkModeContext.Provider, {\n    value: {\n      darkMode,\n      toggle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DarkModeContextProvider, \"GW4r6zdE6GkKVDLeJ9ih728T2Do=\");\n\n_c = DarkModeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DarkModeContextProvider\");","map":{"version":3,"sources":["C:/Users/91987/Desktop/Socialoo/client/src/context/darkModeContext.js"],"names":["createContext","useEffect","useState","DarkModeContext","DarkModeContextProvider","children","darkMode","setDarkMode","JSON","parse","localStorage","getItem","toggle","setItem"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;;AACA,OAAO,MAAMC,eAAe,gBAAGH,aAAa,EAArC,C,CAEP;;AACA,OAAO,MAAMI,uBAAuB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACnD,QAAK,CAACC,QAAD,EAAUC,WAAV,IAAyBL,QAAQ,CAClCM,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,KAAgD,KADd,CAAtC,CADmD,CAEa;AACA;;AAChE,QAAMC,MAAM,GAAG,MAAK;AAChBL,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAgCP,QAAhC,EADU,CACmC;AAChD,GAFQ,EAEP,CAACA,QAAD,CAFO,CAAT;AAIA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAG;AAACA,MAAAA,QAAD;AAAWM,MAAAA;AAAX,KAAlC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAjBM;;GAAMD,uB;;KAAAA,uB","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n//creating a context API\r\nexport const DarkModeContext = createContext();\r\n\r\n//to use the context API we need this below provider to wrap our application in app.js\r\nexport const DarkModeContextProvider = ({children}) => {\r\n    const[darkMode,setDarkMode] = useState(\r\n        JSON.parse(localStorage.getItem(\"darkMode\")) || false);     //JSON.parse will return false as boolean not a string\r\n                                                                    //localStorage to check if it was visited before just take value darkMode\r\n    const toggle = () =>{\r\n        setDarkMode(!darkMode)\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        localStorage.setItem(\"darkMode\",darkMode)    //everytime it changes darkMode it just set in localStorage again\r\n    },[darkMode]);\r\n\r\n    return(\r\n        <DarkModeContext.Provider value ={{darkMode, toggle}}>\r\n            {children}\r\n        </DarkModeContext.Provider>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}