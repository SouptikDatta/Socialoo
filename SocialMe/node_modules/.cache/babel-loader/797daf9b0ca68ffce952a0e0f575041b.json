{"ast":null,"code":"var ensureStaleTime = function ensureStaleTime(defaultedOptions) {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n};\n\nvar willFetch = function willFetch(result, isRestoring) {\n  return result.isLoading && result.isFetching && !isRestoring;\n};\n\nvar shouldSuspend = function shouldSuspend(defaultedOptions, result, isRestoring) {\n  return (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\n};\n\nvar fetchOptimistic = function fetchOptimistic(defaultedOptions, observer, errorResetBoundary) {\n  return observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n    var data = _ref.data;\n    defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n    defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n  }).catch(function (error) {\n    errorResetBoundary.clearReset();\n    defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n    defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n  });\n};\n\nexport { ensureStaleTime, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"mappings":"AAMaA,mBAAe,GAC1BC,SADWD,eACXC,iBAD6B,EAE1B;AACH,MAAIA,gBAAgB,CAACC,QAArB,EAA+B;AAC7B;AACA;AACA,QAAI,OAAOD,gBAAgB,CAACE,SAAxB,KAAsC,QAA1C,EAAoD;AAClDF,sBAAgB,CAACE,SAAjBF,GAA6B,IAA7BA;AACD;AACF;AACF,CAVYD;;IAYAI,SAAS,GAAG,SAAZA,SAAY,CACvBC,MADuB,EAEvBC,WAFuB;AAAA,SAGpBD,MAAM,CAACE,SAAPF,IAAoBA,MAAM,CAACG,UAA3BH,IAAyC,CAACC,WAHtB;AAAA;;AAKlB,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAC3BR,gBAD2B,EAI3BI,MAJ2B,EAK3BC,WAL2B;AAAA,SAMxB,iBAAgB,IAAhB,gCAAgB,CAAEJ,QAAlB,KAA8BE,SAAS,CAACC,MAAD,EAASC,WAAT,CANf;AAAA,CAAtB;;IAQMI,eAAe,GAAG,SAAlBA,eAAkB,CAO7BT,gBAP6B,EAc7BU,QAd6B,EAe7BC,kBAf6B;AAAA,SAiB7BD,QAAQ,CACLD,eADHC,CACmBV,gBADnBU,EAEGE,IAFHF,CAEQ,gBAAc;AAAA,QAAXG,IAAW,QAAXA,IAAW;AAClBb,oBAAgB,CAACc,SAAjBd,oCAAgB,CAACc,SAAjBd,CAA6Ba,IAA7Bb;AACAA,oBAAgB,CAACe,SAAjBf,oCAAgB,CAACe,SAAjBf,CAA6Ba,IAA7Bb,EAAmC,IAAnCA;AAJJ,KAMGgB,KANHN,CAMUO,eAAD,EAAW;AAChBN,sBAAkB,CAACO,UAAnBP;AACAX,oBAAgB,CAACmB,OAAjBnB,oCAAgB,CAACmB,OAAjBnB,CAA2BiB,KAA3BjB;AACAA,oBAAgB,CAACe,SAAjBf,oCAAgB,CAACe,SAAjBf,CAA6BoB,SAA7BpB,EAAwCiB,KAAxCjB;AATJ,IAjB6B;AAAA","names":["ensureStaleTime","defaultedOptions","suspense","staleTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","fetchOptimistic","observer","errorResetBoundary","then","data","onSuccess","onSettled","catch","error","clearReset","onError","undefined"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\react-query\\src\\suspense.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n"]},"metadata":{},"sourceType":"module"}