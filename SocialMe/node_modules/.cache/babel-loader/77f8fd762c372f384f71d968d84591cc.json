{"ast":null,"code":"import _classCallCheck from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nvar QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n\n  var _super = _createSuper(QueriesObserver);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _classCallCheck(this, QueriesObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n\n      if (this.listeners.size === 1) {\n        this.observers.forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this2.onUpdate(observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.size) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = new Set();\n      this.observers.forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, notifyOptions) {\n      var _this3 = this;\n\n      this.queries = queries;\n      notifyManager.batch(function () {\n        var prevObservers = _this3.observers;\n\n        var newObserverMatches = _this3.findMatchingObservers(_this3.queries); // set options for the new observers to notify of changes\n\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n          return [observer.options.queryHash, observer];\n        }));\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n\n        _this3.observers = newObservers;\n        _this3.observersMap = newObserversMap;\n        _this3.result = newResult;\n\n        if (!_this3.hasListeners()) {\n          return;\n        }\n\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this3.onUpdate(observer, result);\n          });\n        });\n\n        _this3.notify();\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.result;\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return this.observers.map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return this.observers;\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      return this.findMatchingObservers(queries).map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n    }\n  }, {\n    key: \"findMatchingObservers\",\n    value: function findMatchingObservers(queries) {\n      var _this4 = this;\n\n      var prevObservers = this.observers;\n      var prevObserversMap = new Map(prevObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var defaultedQueryOptions = queries.map(function (options) {\n        return _this4.client.defaultQueryOptions(options);\n      });\n      var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n        var match = prevObserversMap.get(defaultedOptions.queryHash);\n\n        if (match != null) {\n          return [{\n            defaultedQueryOptions: defaultedOptions,\n            observer: match\n          }];\n        }\n\n        return [];\n      });\n      var matchedQueryHashes = new Set(matchingObservers.map(function (match) {\n        return match.defaultedQueryOptions.queryHash;\n      }));\n      var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n        return !matchedQueryHashes.has(defaultedOptions.queryHash);\n      });\n      var matchingObserversSet = new Set(matchingObservers.map(function (match) {\n        return match.observer;\n      }));\n      var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n        return !matchingObserversSet.has(prevObserver);\n      });\n\n      var getObserver = function getObserver(options) {\n        var defaultedOptions = _this4.client.defaultQueryOptions(options);\n\n        var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n        return currentObserver != null ? currentObserver : new QueryObserver(_this4.client, defaultedOptions);\n      };\n\n      var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          var previouslyUsedObserver = unmatchedObservers[index];\n\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver\n            };\n          }\n        }\n\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options)\n        };\n      });\n\n      var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n        return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n      };\n\n      return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(observer, result) {\n      var index = this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        this.result = replaceAt(this.result, index, result);\n        this.notify();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.listeners.forEach(function (_ref) {\n          var listener = _ref.listener;\n          listener(_this5.result);\n        });\n      });\n    }\n  }]);\n\n  return QueriesObserver;\n}(Subscribable);\n\nexport { QueriesObserver };","map":{"version":3,"mappings":"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","names":["QueriesObserver","constructor","client","queries","result","observers","observersMap","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","length","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","prevObserversMap","Map","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","filter","has","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","replaceAt","listener","Subscribable"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}