{"ast":null,"code":"import _objectSpread from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs'; // CLASS\n\nvar Query = /*#__PURE__*/function (_Removable) {\n  _inherits(Query, _Removable);\n\n  var _super = _createSuper(Query);\n\n  function Query(config) {\n    var _this;\n\n    _classCallCheck(this, Query);\n\n    _this = _super.call(this);\n    _this.abortSignalConsumed = false;\n    _this.defaultOptions = config.defaultOptions;\n\n    _this.setOptions(config.options);\n\n    _this.observers = [];\n    _this.cache = config.cache;\n    _this.logger = config.logger || defaultLogger;\n    _this.queryKey = config.queryKey;\n    _this.queryHash = config.queryHash;\n    _this.initialState = config.state || getDefaultState(_this.options);\n    _this.state = _this.initialState;\n\n    _this.scheduleGc();\n\n    return _this;\n  }\n\n  _createClass(Query, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.defaultOptions), options);\n      this.updateCacheTime(this.options.cacheTime);\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length && this.state.fetchStatus === 'idle') {\n        this.cache.remove(this);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newData, options) {\n      var data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n      this.dispatch({\n        data: data,\n        type: 'success',\n        dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n        manual: options == null ? void 0 : options.manual\n      });\n      return data;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state, setStateOptions) {\n      this.dispatch({\n        type: 'setState',\n        state: state,\n        setStateOptions: setStateOptions\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(options) {\n      var _this$retryer;\n\n      var promise = this.promise;\n      (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n      return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Query.prototype), \"destroy\", this).call(this);\n\n      this.cancel({\n        silent: true\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.destroy();\n      this.setState(this.initialState);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.observers.some(function (observer) {\n        return observer.options.enabled !== false;\n      });\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.getObserversCount() > 0 && !this.isActive();\n    }\n  }, {\n    key: \"isStale\",\n    value: function isStale() {\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n        return observer.getCurrentResult().isStale;\n      });\n    }\n  }, {\n    key: \"isStaleByTime\",\n    value: function isStaleByTime() {\n      var staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this$retryer2;\n\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnWindowFocus();\n      });\n\n      if (observer) {\n        observer.refetch({\n          cancelRefetch: false\n        });\n      } // Continue fetch if currently paused\n\n\n      (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this$retryer3;\n\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnReconnect();\n      });\n\n      if (observer) {\n        observer.refetch({\n          cancelRefetch: false\n        });\n      } // Continue fetch if currently paused\n\n\n      (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!this.observers.includes(observer)) {\n        this.observers.push(observer); // Stop the query from being garbage collected\n\n        this.clearGcTimeout();\n        this.cache.notify({\n          type: 'observerAdded',\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      if (this.observers.includes(observer)) {\n        this.observers = this.observers.filter(function (x) {\n          return x !== observer;\n        });\n\n        if (!this.observers.length) {\n          // If the transport layer does not support cancellation\n          // we'll let the query continue so the result can be cached\n          if (this.retryer) {\n            if (this.abortSignalConsumed) {\n              this.retryer.cancel({\n                revert: true\n              });\n            } else {\n              this.retryer.cancelRetry();\n            }\n          }\n\n          this.scheduleGc();\n        }\n\n        this.cache.notify({\n          type: 'observerRemoved',\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"getObserversCount\",\n    value: function getObserversCount() {\n      return this.observers.length;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!this.state.isInvalidated) {\n        this.dispatch({\n          type: 'invalidate'\n        });\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(options, fetchOptions) {\n      var _this2 = this;\n\n      var _this$options$behavio, _context$fetchOptions;\n\n      if (this.state.fetchStatus !== 'idle') {\n        if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n          // Silently cancel current fetch if the user wants to cancel refetches\n          this.cancel({\n            silent: true\n          });\n        } else if (this.promise) {\n          var _this$retryer4; // make sure that retries that were potentially cancelled due to unmounts can continue\n\n\n          (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n          return this.promise;\n        }\n      } // Update config if passed, otherwise the config from the last execution is used\n\n\n      if (options) {\n        this.setOptions(options);\n      } // Use the options from the first observer with a query function if no function is found.\n      // This can happen when the query is hydrated or created with setQueryData.\n\n\n      if (!this.options.queryFn) {\n        var observer = this.observers.find(function (x) {\n          return x.options.queryFn;\n        });\n\n        if (observer) {\n          this.setOptions(observer.options);\n        }\n      }\n\n      if (!Array.isArray(this.options.queryKey)) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n        }\n      }\n\n      var abortController = getAbortController(); // Create query function context\n\n      var queryFnContext = {\n        queryKey: this.queryKey,\n        pageParam: undefined,\n        meta: this.meta\n      }; // Adds an enumerable signal property to the object that\n      // which sets abortSignalConsumed to true when the signal\n      // is read.\n\n      var addSignalProperty = function addSignalProperty(object) {\n        Object.defineProperty(object, 'signal', {\n          enumerable: true,\n          get: function get() {\n            if (abortController) {\n              _this2.abortSignalConsumed = true;\n              return abortController.signal;\n            }\n\n            return undefined;\n          }\n        });\n      };\n\n      addSignalProperty(queryFnContext); // Create fetch function\n\n      var fetchFn = function fetchFn() {\n        if (!_this2.options.queryFn) {\n          return Promise.reject(\"Missing queryFn for queryKey '\" + _this2.options.queryHash + \"'\");\n        }\n\n        _this2.abortSignalConsumed = false;\n        return _this2.options.queryFn(queryFnContext);\n      }; // Trigger behavior hook\n\n\n      var context = {\n        fetchOptions: fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        state: this.state,\n        fetchFn: fetchFn\n      };\n      addSignalProperty(context);\n      (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n      this.revertState = this.state; // Set to fetching state if not already in it\n\n      if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n        var _context$fetchOptions2;\n\n        this.dispatch({\n          type: 'fetch',\n          meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n        });\n      }\n\n      var onError = function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n\n        if (!isCancelledError(error)) {\n          var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2; // Notify cache callback\n\n\n          (_this$cache$config$on = (_this$cache$config = _this2.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, _this2);\n          (_this$cache$config$on2 = (_this$cache$config2 = _this2.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, _this2.state.data, error, _this2);\n\n          if (process.env.NODE_ENV !== 'production') {\n            _this2.logger.error(error);\n          }\n        }\n\n        if (!_this2.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          _this2.scheduleGc();\n        }\n\n        _this2.isFetchingOptimistic = false;\n      }; // Try to fetch the data\n\n\n      this.retryer = createRetryer({\n        fn: context.fetchFn,\n        abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n        onSuccess: function onSuccess(data) {\n          var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n\n          if (typeof data === 'undefined') {\n            if (process.env.NODE_ENV !== 'production') {\n              _this2.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + _this2.queryHash);\n            }\n\n            onError(new Error(_this2.queryHash + \" data is undefined\"));\n            return;\n          }\n\n          _this2.setData(data); // Notify cache callback\n\n\n          (_this$cache$config$on3 = (_this$cache$config3 = _this2.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, _this2);\n          (_this$cache$config$on4 = (_this$cache$config4 = _this2.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, _this2.state.error, _this2);\n\n          if (!_this2.isFetchingOptimistic) {\n            // Schedule query gc after fetching\n            _this2.scheduleGc();\n          }\n\n          _this2.isFetchingOptimistic = false;\n        },\n        onError: onError,\n        onFail: function onFail(failureCount, error) {\n          _this2.dispatch({\n            type: 'failed',\n            failureCount: failureCount,\n            error: error\n          });\n        },\n        onPause: function onPause() {\n          _this2.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: function onContinue() {\n          _this2.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: context.options.retry,\n        retryDelay: context.options.retryDelay,\n        networkMode: context.options.networkMode\n      });\n      this.promise = this.retryer.promise;\n      return this.promise;\n    }\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n\n      var reducer = function reducer(state) {\n        var _action$meta, _action$dataUpdatedAt;\n\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchFailureCount: action.failureCount,\n              fetchFailureReason: action.error\n            });\n\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchStatus: 'paused'\n            });\n\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchStatus: 'fetching'\n            });\n\n          case 'fetch':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n              fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n              fetchStatus: canFetch(_this3.options.networkMode) ? 'fetching' : 'paused'\n            }, !state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            });\n\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              dataUpdateCount: state.dataUpdateCount + 1,\n              dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n              error: null,\n              isInvalidated: false,\n              status: 'success'\n            }, !action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            });\n\n          case 'error':\n            var error = action.error;\n\n            if (isCancelledError(error) && error.revert && _this3.revertState) {\n              return _objectSpread({}, _this3.revertState);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              error: error,\n              errorUpdateCount: state.errorUpdateCount + 1,\n              errorUpdatedAt: Date.now(),\n              fetchFailureCount: state.fetchFailureCount + 1,\n              fetchFailureReason: error,\n              fetchStatus: 'idle',\n              status: 'error'\n            });\n\n          case 'invalidate':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isInvalidated: true\n            });\n\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onQueryUpdate(action);\n        });\n\n        _this3.cache.notify({\n          query: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n\n  return Query;\n}(Removable);\n\nfunction getDefaultState(options) {\n  var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  var hasData = typeof data !== 'undefined';\n  var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data: data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };","map":{"version":3,"mappings":"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","names":["Query","constructor","config","abortSignalConsumed","defaultOptions","setOptions","options","observers","cache","logger","defaultLogger","queryKey","queryHash","initialState","state","getDefaultState","scheduleGc","meta","updateCacheTime","cacheTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","replaceData","dispatch","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","promise","retryer","then","noop","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","timeUntilStale","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","queryFn","Array","isArray","process","env","NODE_ENV","error","abortController","getAbortController","queryFnContext","pageParam","undefined","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","reject","context","behavior","onFetch","revertState","fetchMeta","_context$fetchOptions","onError","isCancelledError","onSettled","isFetchingOptimistic","createRetryer","fn","abort","bind","onSuccess","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","action","reducer","fetchFailureCount","fetchFailureReason","_action$meta","canFetch","status","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","notifyManager","batch","forEach","onQueryUpdate","Removable","initialData","hasData","initialDataUpdatedAt"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\query-core\\src\\query.ts"],"sourcesContent":["import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  FetchStatus,\n  InitialDataFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Logger } from './logger'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject(\n          `Missing queryFn for queryKey '${this.options.queryHash}'`,\n        )\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          this.state.data,\n          error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          data,\n          this.state.error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}