{"ast":null,"code":"import _slicedToArray from\"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useEffect,useState}from\"react\";//creating a context API\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var DarkModeContext=/*#__PURE__*/createContext();//to use the context API we need this below provider to wrap our application in app.js\nexport var DarkModeContextProvider=function DarkModeContextProvider(_ref){var children=_ref.children;var _useState=useState(JSON.parse(localStorage.getItem(\"darkMode\"))||false),_useState2=_slicedToArray(_useState,2),darkMode=_useState2[0],setDarkMode=_useState2[1];//JSON.parse will return false as boolean not a string\n//localStorage to check if it was visited before just take value darkMode\nvar toggle=function toggle(){setDarkMode(!darkMode);};useEffect(function(){localStorage.setItem(\"darkMode\",darkMode);//everytime it changes darkMode it just set in localStorage again\n},[darkMode]);return/*#__PURE__*/_jsx(DarkModeContext.Provider,{value:{darkMode:darkMode,toggle:toggle},children:children});};","map":{"version":3,"names":["createContext","useEffect","useState","jsx","_jsx","DarkModeContext","DarkModeContextProvider","_ref","children","_useState","JSON","parse","localStorage","getItem","_useState2","_slicedToArray","darkMode","setDarkMode","toggle","setItem","Provider","value"],"sources":["C:/Users/91987/Desktop/Social Media/SocialMedia/client/src/context/darkModeContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n//creating a context API\r\nexport const DarkModeContext = createContext();\r\n\r\n//to use the context API we need this below provider to wrap our application in app.js\r\nexport const DarkModeContextProvider = ({children}) => {\r\n    const[darkMode,setDarkMode] = useState(\r\n        JSON.parse(localStorage.getItem(\"darkMode\")) || false);     //JSON.parse will return false as boolean not a string\r\n                                                                    //localStorage to check if it was visited before just take value darkMode\r\n    const toggle = () =>{\r\n        setDarkMode(!darkMode)\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        localStorage.setItem(\"darkMode\",darkMode)    //everytime it changes darkMode it just set in localStorage again\r\n    },[darkMode]);\r\n\r\n    return(\r\n        <DarkModeContext.Provider value ={{darkMode, toggle}}>\r\n            {children}\r\n        </DarkModeContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"4IAAA,OAASA,aAAa,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE1D;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,IAAM,CAAAC,eAAe,cAAGL,aAAa,CAAC,CAAC,CAE9C;AACA,MAAO,IAAM,CAAAM,uBAAuB,CAAG,QAA1B,CAAAA,uBAAuBA,CAAAC,IAAA,CAAmB,IAAd,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAC7C,IAAAC,SAAA,CAA8BP,QAAQ,CAClCQ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAI,KAAK,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAN,SAAA,IADpDO,QAAQ,CAAAF,UAAA,IAACG,WAAW,CAAAH,UAAA,IACsC;AACA;AAChE,GAAM,CAAAI,MAAM,CAAG,QAAT,CAAAA,MAAMA,CAAA,CAAQ,CAChBD,WAAW,CAAC,CAACD,QAAQ,CAAC,CAC1B,CAAC,CAEDf,SAAS,CAAC,UAAI,CACVW,YAAY,CAACO,OAAO,CAAC,UAAU,CAACH,QAAQ,CAAC,CAAI;AACjD,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CAEb,mBACIZ,IAAA,CAACC,eAAe,CAACe,QAAQ,EAACC,KAAK,CAAG,CAACL,QAAQ,CAARA,QAAQ,CAAEE,MAAM,CAANA,MAAM,CAAE,CAAAV,QAAA,CAChDA,QAAQ,CACa,CAAC,CAEnC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}