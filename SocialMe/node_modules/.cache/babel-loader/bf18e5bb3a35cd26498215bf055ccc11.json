{"ast":null,"code":"import _classCallCheck from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nvar FocusManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(FocusManager, _Subscribable);\n\n  var _super = _createSuper(FocusManager);\n\n  function FocusManager() {\n    var _this;\n\n    _classCallCheck(this, FocusManager);\n\n    _this = _super.call(this);\n\n    _this.setup = function (onFocus) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onFocus();\n        }; // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n\n    return _this;\n  }\n\n  _createClass(FocusManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n\n      var _this$cleanup2;\n\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (focused) {\n        if (typeof focused === 'boolean') {\n          _this2.setFocused(focused);\n        } else {\n          _this2.onFocus();\n        }\n      });\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(focused) {\n      var changed = this.focused !== focused;\n\n      if (changed) {\n        this.focused = focused;\n        this.onFocus();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.listeners.forEach(function (_ref) {\n        var listener = _ref.listener;\n        listener();\n      });\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      if (typeof this.focused === 'boolean') {\n        return this.focused;\n      } // document global can be unavailable in react native\n\n\n      if (typeof document === 'undefined') {\n        return true;\n      }\n\n      return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n    }\n  }]);\n\n  return FocusManager;\n}(Subscribable);\n\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"mappings":";;;;;;;IAOaA,Y;;;;;AAMXC,0BAAc;AAAA;;AAAA;;AACZ;;AACA,UAAKC,KAAL,GAAcC,iBAAD,EAAa;AACxB;AACA;AACA,UAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;AACxC,YAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,iBAAMJ,OAAO,EAAb;AAAA,SAAjB,CADwC;;;AAGxCE,cAAM,CAACC,gBAAPD,CAAwB,kBAAxBA,EAA4CE,QAA5CF,EAAsD,KAAtDA;AACAA,cAAM,CAACC,gBAAPD,CAAwB,OAAxBA,EAAiCE,QAAjCF,EAA2C,KAA3CA;AAEA,eAAO,YAAM;AACX;AACAA,gBAAM,CAACG,mBAAPH,CAA2B,kBAA3BA,EAA+CE,QAA/CF;AACAA,gBAAM,CAACG,mBAAPH,CAA2B,OAA3BA,EAAoCE,QAApCF;AAHF;AAKD;;AACD;AAfF;;AAFY;AAmBb;;;;WAESI,uBAAoB;AAC5B,UAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,aAAKC,gBAAL,CAAsB,KAAKT,KAA3B;AACD;AACF;;;WAESU,yBAAgB;AACxB,UAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AAAA;;AACxB,8BAAKH,OAAL;AACA,aAAKA,OAAL,GAAeI,SAAf;AACD;AACF;;;WAEDH,0BAAiBT,KAAjBS,EAAuC;AAAA;;AAAA;;AACrC,WAAKT,KAAL,GAAaA,KAAb;AACA,6BAAKQ,OAAL;AACA,WAAKA,OAAL,GAAeR,KAAK,CAAEa,iBAAD,EAAa;AAChC,YAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,gBAAKC,WAAL,CAAgBD,OAAhB;AADF,eAEO;AACL,iBAAKZ,OAAL;AACD;AALiB,QAApB;AAOD;;;WAEDa,oBAAWD,OAAXC,EAAoC;AAClC,UAAMC,OAAO,GAAG,KAAKF,OAAL,KAAiBA,OAAjC;;AACA,UAAIE,OAAJ,EAAa;AACX,aAAKF,OAAL,GAAeA,OAAf;AACA,aAAKZ,OAAL;AACD;AACF;;;WAEDA,mBAAgB;AACd,WAAKe,SAAL,CAAeC,OAAf,CAAuB,gBAAkB;AAAA,YAAfZ,QAAe,QAAfA,QAAe;AACvCA,gBAAQ;AADV;AAGD;;;WAEDa,qBAAqB;AACnB,UAAI,OAAO,KAAKL,OAAZ,KAAwB,SAA5B,EAAuC;AACrC,eAAO,KAAKA,OAAZ;AAFiB;;;AAMnB,UAAI,OAAOM,QAAP,KAAoB,WAAxB,EAAqC;AACnC,eAAO,IAAP;AACD;;AAED,aAAO,CAACP,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoCQ,QAApC,CACLD,QAAQ,CAACE,eADJ,CAAP;AAGD;;;;EA/E+BC,Y;;AAkFrBC,gBAAY,GAAG,IAAIzB,YAAJ,EAAfyB","names":["FocusManager","constructor","setup","onFocus","isServer","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","focused","setFocused","changed","listeners","forEach","isFocused","document","includes","visibilityState","Subscribable","focusManager"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\query-core\\src\\focusManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.focused !== focused\n    if (changed) {\n      this.focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n"]},"metadata":{},"sourceType":"module"}