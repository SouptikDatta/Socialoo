{"ast":null,"code":"import _classCallCheck from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Social Media/SocialMedia/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\nvar onlineEvents = ['online', 'offline'];\n\nvar OnlineManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(OnlineManager, _Subscribable);\n\n  var _super = _createSuper(OnlineManager);\n\n  function OnlineManager() {\n    var _this;\n\n    _classCallCheck(this, OnlineManager);\n\n    _this = _super.call(this);\n\n    _this.setup = function (onOnline) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onOnline();\n        }; // Listen to online\n\n\n        onlineEvents.forEach(function (event) {\n          window.addEventListener(event, listener, false);\n        });\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(function (event) {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n\n      return;\n    };\n\n    return _this;\n  }\n\n  _createClass(OnlineManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n\n      var _this$cleanup2;\n\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (online) {\n        if (typeof online === 'boolean') {\n          _this2.setOnline(online);\n        } else {\n          _this2.onOnline();\n        }\n      });\n    }\n  }, {\n    key: \"setOnline\",\n    value: function setOnline(online) {\n      var changed = this.online !== online;\n\n      if (changed) {\n        this.online = online;\n        this.onOnline();\n      }\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      this.listeners.forEach(function (_ref) {\n        var listener = _ref.listener;\n        listener();\n      });\n    }\n  }, {\n    key: \"isOnline\",\n    value: function isOnline() {\n      if (typeof this.online === 'boolean') {\n        return this.online;\n      }\n\n      if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n        return true;\n      }\n\n      return navigator.onLine;\n    }\n  }]);\n\n  return OnlineManager;\n}(Subscribable);\n\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";;;;;;AAOA,IAAMA,YAAY,GAAG,CAAC,QAAD,EAAW,SAAX,CAArB;;IAEaC,a;;;;;AAMXC,2BAAc;AAAA;;AAAA;;AACZ;;AACA,UAAKC,KAAL,GAAcC,kBAAD,EAAc;AACzB;AACA;AACA,UAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;AACxC,YAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,iBAAMJ,QAAQ,EAAd;AAAA,SAAjB,CADwC;;;AAGxCJ,oBAAY,CAACS,OAAbT,CAAsBU,eAAD,EAAW;AAC9BJ,gBAAM,CAACC,gBAAPD,CAAwBI,KAAxBJ,EAA+BE,QAA/BF,EAAyC,KAAzCA;AADF;AAIA,eAAO,YAAM;AACX;AACAN,sBAAY,CAACS,OAAbT,CAAsBU,eAAD,EAAW;AAC9BJ,kBAAM,CAACK,mBAAPL,CAA2BI,KAA3BJ,EAAkCE,QAAlCF;AADF;AAFF;AAMD;;AAED;AAlBF;;AAFY;AAsBb;;;;WAESM,uBAAoB;AAC5B,UAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,aAAKC,gBAAL,CAAsB,KAAKX,KAA3B;AACD;AACF;;;WAESY,yBAAgB;AACxB,UAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AAAA;;AACxB,8BAAKH,OAAL;AACA,aAAKA,OAAL,GAAeI,SAAf;AACD;AACF;;;WAEDH,0BAAiBX,KAAjBW,EAAuC;AAAA;;AAAA;;AACrC,WAAKX,KAAL,GAAaA,KAAb;AACA,6BAAKU,OAAL;AACA,WAAKA,OAAL,GAAeV,KAAK,CAAEe,gBAAD,EAAsB;AACzC,YAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,gBAAKC,UAAL,CAAeD,MAAf;AADF,eAEO;AACL,iBAAKd,QAAL;AACD;AALiB,QAApB;AAOD;;;WAEDe,mBAAUD,MAAVC,EAAkC;AAChC,UAAMC,OAAO,GAAG,KAAKF,MAAL,KAAgBA,MAAhC;;AAEA,UAAIE,OAAJ,EAAa;AACX,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKd,QAAL;AACD;AACF;;;WAEDA,oBAAiB;AACf,WAAKiB,SAAL,CAAeZ,OAAf,CAAuB,gBAAkB;AAAA,YAAfD,QAAe,QAAfA,QAAe;AACvCA,gBAAQ;AADV;AAGD;;;WAEDc,oBAAoB;AAClB,UAAI,OAAO,KAAKJ,MAAZ,KAAuB,SAA3B,EAAsC;AACpC,eAAO,KAAKA,MAAZ;AACD;;AAED,UACE,OAAOK,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;AACA,eAAO,IAAP;AACD;;AAED,aAAOD,SAAS,CAACC,MAAjB;AACD;;;;EAnFgCC,Y;;AAsFtBC,iBAAa,GAAG,IAAIzB,aAAJ,EAAhByB","names":["onlineEvents","OnlineManager","constructor","setup","onOnline","isServer","window","addEventListener","listener","forEach","event","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","changed","listeners","isOnline","navigator","onLine","Subscribable","onlineManager"],"sources":["C:\\Users\\91987\\Desktop\\Social Media\\SocialMedia\\client\\node_modules\\@tanstack\\query-core\\src\\onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    const changed = this.online !== online\n\n    if (changed) {\n      this.online = online\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}