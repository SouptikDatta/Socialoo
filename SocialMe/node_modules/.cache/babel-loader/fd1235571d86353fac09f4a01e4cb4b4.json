{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\91987\\\\Desktop\\\\Socialoo\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs'; // CLASS\n\nvar Mutation = /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n\n  var _super = _createSuper(Mutation);\n\n  function Mutation(config) {\n    var _this;\n\n    _classCallCheck(this, Mutation);\n\n    _this = _super.call(this);\n    _this.defaultOptions = config.defaultOptions;\n    _this.mutationId = config.mutationId;\n    _this.mutationCache = config.mutationCache;\n    _this.logger = config.logger || defaultLogger;\n    _this.observers = [];\n    _this.state = config.state || getDefaultState();\n\n    _this.setOptions(config.options);\n\n    _this.scheduleGc();\n\n    return _this;\n  }\n\n  _createClass(Mutation, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.defaultOptions), options);\n      this.updateCacheTime(this.options.cacheTime);\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.dispatch({\n        type: 'setState',\n        state: state\n      });\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!this.observers.includes(observer)) {\n        this.observers.push(observer); // Stop the mutation from being garbage collected\n\n        this.clearGcTimeout();\n        this.mutationCache.notify({\n          type: 'observerAdded',\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n      this.scheduleGc();\n      this.mutationCache.notify({\n        type: 'observerRemoved',\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length) {\n        if (this.state.status === 'loading') {\n          this.scheduleGc();\n        } else {\n          this.mutationCache.remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _this$retryer$continu, _this$retryer;\n\n      return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var executeMutation, restored, _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3, _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options, context, data, _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                executeMutation = function executeMutation() {\n                  var _this$options$retry;\n\n                  _this2.retryer = createRetryer({\n                    fn: function fn() {\n                      if (!_this2.options.mutationFn) {\n                        return Promise.reject('No mutationFn found');\n                      }\n\n                      return _this2.options.mutationFn(_this2.state.variables);\n                    },\n                    onFail: function onFail(failureCount, error) {\n                      _this2.dispatch({\n                        type: 'failed',\n                        failureCount: failureCount,\n                        error: error\n                      });\n                    },\n                    onPause: function onPause() {\n                      _this2.dispatch({\n                        type: 'pause'\n                      });\n                    },\n                    onContinue: function onContinue() {\n                      _this2.dispatch({\n                        type: 'continue'\n                      });\n                    },\n                    retry: (_this$options$retry = _this2.options.retry) != null ? _this$options$retry : 0,\n                    retryDelay: _this2.options.retryDelay,\n                    networkMode: _this2.options.networkMode\n                  });\n                  return _this2.retryer.promise;\n                };\n\n                restored = this.state.status === 'loading';\n                _context.prev = 2;\n\n                if (restored) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this.dispatch({\n                  type: 'loading',\n                  variables: this.options.variables\n                }); // Notify cache callback\n\n                _context.next = 7;\n                return (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n\n              case 7:\n                _context.next = 9;\n                return (_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables);\n\n              case 9:\n                context = _context.sent;\n\n                if (context !== this.state.context) {\n                  this.dispatch({\n                    type: 'loading',\n                    context: context,\n                    variables: this.state.variables\n                  });\n                }\n\n              case 11:\n                _context.next = 13;\n                return executeMutation();\n\n              case 13:\n                data = _context.sent;\n                _context.next = 16;\n                return (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n\n              case 16:\n                _context.next = 18;\n                return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context);\n\n              case 18:\n                _context.next = 20;\n                return (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this);\n\n              case 20:\n                _context.next = 22;\n                return (_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context);\n\n              case 22:\n                this.dispatch({\n                  type: 'success',\n                  data: data\n                });\n                return _context.abrupt(\"return\", data);\n\n              case 26:\n                _context.prev = 26;\n                _context.t0 = _context[\"catch\"](2);\n                _context.prev = 28;\n                _context.next = 31;\n                return (_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, _context.t0, this.state.variables, this.state.context, this);\n\n              case 31:\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.error(_context.t0);\n                }\n\n                _context.next = 34;\n                return (_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, _context.t0, this.state.variables, this.state.context);\n\n              case 34:\n                _context.next = 36;\n                return (_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, _context.t0, this.state.variables, this.state.context, this);\n\n              case 36:\n                _context.next = 38;\n                return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, _context.t0, this.state.variables, this.state.context);\n\n              case 38:\n                throw _context.t0;\n\n              case 39:\n                _context.prev = 39;\n                this.dispatch({\n                  type: 'error',\n                  error: _context.t0\n                });\n                return _context.finish(39);\n\n              case 42:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 26], [28,, 39, 42]]);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n\n      var reducer = function reducer(state) {\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              failureCount: action.failureCount,\n              failureReason: action.error\n            });\n\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: true\n            });\n\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: false\n            });\n\n          case 'loading':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              context: action.context,\n              data: undefined,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              isPaused: !canFetch(_this3.options.networkMode),\n              status: 'loading',\n              variables: action.variables\n            });\n\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              status: 'success',\n              isPaused: false\n            });\n\n          case 'error':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: undefined,\n              error: action.error,\n              failureCount: state.failureCount + 1,\n              failureReason: action.error,\n              isPaused: false,\n              status: 'error'\n            });\n\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onMutationUpdate(action);\n        });\n\n        _this3.mutationCache.notify({\n          mutation: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n\n  return Mutation;\n}(Removable);\n\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["Mutation","constructor","config","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","includes","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","_this$retryer$continu","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","onMutate","_this$mutationCache$c","_this$mutationCache$c2","context","data","onSuccess","_this$options$onSucce","onSettled","_this$options$onSettl","onError","process","env","NODE_ENV","_this$options$onError","undefined","_this$options$onSettl2","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate","Removable"],"sources":["C:\\Users\\91987\\Desktop\\Socialoo\\client\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, createRetryer } from './retryer'\nimport type { MutationMeta, MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.defaultOptions = config.defaultOptions\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      // Notify cache callback\n      await this.mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.mutationCache.config.onSettled?.(\n          undefined,\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}