{"ast":null,"code":"import _objectSpread from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"refetchPage\"];\nimport { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nvar QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n\n  var _super = _createSuper(QueryObserver);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _classCallCheck(this, QueryObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = new Set();\n    _this.selectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.remove = this.remove.bind(this);\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.size === 1) {\n        this.currentQuery.addObserver(this);\n\n        if (shouldFetchOnMount(this.currentQuery, this.options)) {\n          this.executeFetch();\n        }\n\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = new Set();\n      this.clearStaleTimeout();\n      this.clearRefetchInterval();\n      this.currentQuery.removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = this.currentQuery;\n      this.options = this.client.defaultQueryOptions(options);\n\n      if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n        this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n      }\n\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getQueryCache().notify({\n          type: 'observerOptionsUpdated',\n          query: this.currentQuery,\n          observer: this\n        });\n      }\n\n      if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n        throw new Error('Expected enabled to be a boolean');\n      } // Keep previous query key if the user does not supply one\n\n\n      if (!this.options.queryKey) {\n        this.options.queryKey = prevOptions.queryKey;\n      }\n\n      this.updateQuery();\n      var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n      if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n        this.executeFetch();\n      } // Update result\n\n\n      this.updateResult(notifyOptions); // Update stale interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n        this.updateStaleTimeout();\n      }\n\n      var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n        this.updateRefetchInterval(nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = this.client.getQueryCache().build(this.client, options);\n      var result = this.createResult(query, options);\n\n      if (shouldAssignObserverCurrentProperties(this, result, options)) {\n        // this assigns the optimistic result to the current Observer\n        // because if the query function changes, useQuery will be performing\n        // an effect where it would fetch again.\n        // When the fetch finishes, we perform a deep data cloning in order\n        // to reuse objects references. This deep data clone is performed against\n        // the `observer.currentResult.data` property\n        // When QueryKey changes, we refresh the query and get new `optimistic`\n        // result, while we leave the `observer.currentResult`, so when new data\n        // arrives, it finds the old `observer.currentResult` which is related\n        // to the old QueryKey. Which means that currentResult and selectData are\n        // out of sync already.\n        // To solve this, we move the cursor of the currentResult everytime\n        // an observer reads an optimistic value.\n        // When keeping the previous data, the result doesn't change until new\n        // data arrives.\n        this.currentResult = result;\n        this.currentResultOptions = this.options;\n        this.currentResultState = this.currentQuery.state;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result) {\n      var _this2 = this;\n\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _this2.trackedProps.add(key);\n\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return this.currentQuery;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.client.getQueryCache().remove(this.currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          refetchPage = _ref.refetchPage,\n          options = _objectWithoutProperties(_ref, _excluded);\n\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          refetchPage: refetchPage\n        }\n      }));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n\n      var defaultedOptions = this.client.defaultQueryOptions(options);\n      var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _this4 = this;\n\n      var _fetchOptions$cancelR;\n\n      return this.executeFetch(_objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n\n        return _this4.currentResult;\n      });\n    }\n  }, {\n    key: \"executeFetch\",\n    value: function executeFetch(fetchOptions) {\n      // Make sure we reference the latest query as the current one might have been removed\n      this.updateQuery(); // Fetch\n\n      var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n      if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n\n      return promise;\n    }\n  }, {\n    key: \"updateStaleTimeout\",\n    value: function updateStaleTimeout() {\n      var _this5 = this;\n\n      this.clearStaleTimeout();\n\n      if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n        return;\n      }\n\n      var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n      // To mitigate this issue we always add 1 ms to the timeout.\n\n      var timeout = time + 1;\n      this.staleTimeoutId = setTimeout(function () {\n        if (!_this5.currentResult.isStale) {\n          _this5.updateResult();\n        }\n      }, timeout);\n    }\n  }, {\n    key: \"computeRefetchInterval\",\n    value: function computeRefetchInterval() {\n      var _this$options$refetch;\n\n      return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n  }, {\n    key: \"updateRefetchInterval\",\n    value: function updateRefetchInterval(nextInterval) {\n      var _this6 = this;\n\n      this.clearRefetchInterval();\n      this.currentRefetchInterval = nextInterval;\n\n      if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n        return;\n      }\n\n      this.refetchIntervalId = setInterval(function () {\n        if (_this6.options.refetchIntervalInBackground || focusManager.isFocused()) {\n          _this6.executeFetch();\n        }\n      }, this.currentRefetchInterval);\n    }\n  }, {\n    key: \"updateTimers\",\n    value: function updateTimers() {\n      this.updateStaleTimeout();\n      this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n  }, {\n    key: \"clearStaleTimeout\",\n    value: function clearStaleTimeout() {\n      if (this.staleTimeoutId) {\n        clearTimeout(this.staleTimeoutId);\n        this.staleTimeoutId = undefined;\n      }\n    }\n  }, {\n    key: \"clearRefetchInterval\",\n    value: function clearRefetchInterval() {\n      if (this.refetchIntervalId) {\n        clearInterval(this.refetchIntervalId);\n        this.refetchIntervalId = undefined;\n      }\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = this.currentQuery;\n      var prevOptions = this.options;\n      var prevResult = this.currentResult;\n      var prevResultState = this.currentResultState;\n      var prevResultOptions = this.currentResultOptions;\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n      var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n      var state = query.state;\n      var dataUpdatedAt = state.dataUpdatedAt,\n          error = state.error,\n          errorUpdatedAt = state.errorUpdatedAt,\n          fetchStatus = state.fetchStatus,\n          status = state.status;\n      var isPreviousData = false;\n      var isPlaceholderData = false;\n      var data; // Optimistically set result in fetching state if needed\n\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n        if (fetchOnMount || fetchOptionally) {\n          fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n          if (!dataUpdatedAt) {\n            status = 'loading';\n          }\n        }\n\n        if (options._optimisticResults === 'isRestoring') {\n          fetchStatus = 'idle';\n        }\n      } // Keep previous data if needed\n\n\n      if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n        data = prevQueryResult.data;\n        dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n        status = prevQueryResult.status;\n        isPreviousData = true;\n      } // Select data if needed\n      else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n          data = this.selectResult;\n        } else {\n          try {\n            this.selectFn = options.select;\n            data = options.select(state.data);\n            data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n            this.selectResult = data;\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      } // Use query data\n      else {\n        data = state.data;\n      } // Show placeholder data if needed\n\n\n      if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n        var placeholderData; // Memoize placeholder data\n\n        if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n          if (options.select && typeof placeholderData !== 'undefined') {\n            try {\n              placeholderData = options.select(placeholderData);\n              this.selectError = null;\n            } catch (selectError) {\n              if (process.env.NODE_ENV !== 'production') {\n                this.client.getLogger().error(selectError);\n              }\n\n              this.selectError = selectError;\n            }\n          }\n        }\n\n        if (typeof placeholderData !== 'undefined') {\n          status = 'success';\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n\n      if (this.selectError) {\n        error = this.selectError;\n        data = this.selectResult;\n        errorUpdatedAt = Date.now();\n        status = 'error';\n      }\n\n      var isFetching = fetchStatus === 'fetching';\n      var isLoading = status === 'loading';\n      var isError = status === 'error';\n      var result = {\n        status: status,\n        fetchStatus: fetchStatus,\n        isLoading: isLoading,\n        isSuccess: status === 'success',\n        isError: isError,\n        isInitialLoading: isLoading && isFetching,\n        data: data,\n        dataUpdatedAt: dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: state.fetchFailureCount,\n        failureReason: state.fetchFailureReason,\n        errorUpdateCount: state.errorUpdateCount,\n        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isLoading,\n        isLoadingError: isError && state.dataUpdatedAt === 0,\n        isPaused: fetchStatus === 'paused',\n        isPlaceholderData: isPlaceholderData,\n        isPreviousData: isPreviousData,\n        isRefetchError: isError && state.dataUpdatedAt !== 0,\n        isStale: isStale(query, options),\n        refetch: this.refetch,\n        remove: this.remove\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this7 = this;\n\n      var prevResult = this.currentResult;\n      var nextResult = this.createResult(this.currentQuery, this.options);\n      this.currentResultState = this.currentQuery.state;\n      this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n\n      this.currentResult = nextResult; // Determine which callbacks to trigger\n\n      var defaultNotifyOptions = {\n        cache: true\n      };\n\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n\n        var notifyOnChangeProps = _this7.options.notifyOnChangeProps;\n        var notifyOnChangePropsValue = typeof notifyOnChangeProps === 'function' ? notifyOnChangeProps() : notifyOnChangeProps;\n\n        if (notifyOnChangePropsValue === 'all' || !notifyOnChangePropsValue && !_this7.trackedProps.size) {\n          return true;\n        }\n\n        var includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : _this7.trackedProps);\n\n        if (_this7.options.useErrorBoundary) {\n          includedProps.add('error');\n        }\n\n        return Object.keys(_this7.currentResult).some(function (key) {\n          var typedKey = key;\n          var changed = _this7.currentResult[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n\n      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n\n      this.notify(_objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery() {\n      var query = this.client.getQueryCache().build(this.client, this.options);\n\n      if (query === this.currentQuery) {\n        return;\n      }\n\n      var prevQuery = this.currentQuery;\n      this.currentQuery = query;\n      this.currentQueryInitialState = query.state;\n      this.previousQueryResult = this.currentResult;\n\n      if (this.hasListeners()) {\n        prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n        query.addObserver(this);\n      }\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate(action) {\n      var notifyOptions = {};\n\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = !action.manual;\n      } else if (action.type === 'error' && !isCancelledError(action.error)) {\n        notifyOptions.onError = true;\n      }\n\n      this.updateResult(notifyOptions);\n\n      if (this.hasListeners()) {\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(notifyOptions) {\n      var _this8 = this;\n\n      notifyManager.batch(function () {\n        // First trigger the configuration callbacks\n        if (notifyOptions.onSuccess) {\n          var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n          (_this$options$onSucce = (_this$options = _this8.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, _this8.currentResult.data);\n          (_this$options$onSettl = (_this$options2 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, _this8.currentResult.data, null);\n        } else if (notifyOptions.onError) {\n          var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n          (_this$options$onError = (_this$options3 = _this8.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, _this8.currentResult.error);\n          (_this$options$onSettl2 = (_this$options4 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, _this8.currentResult.error);\n        } // Then trigger the listeners\n\n\n        if (notifyOptions.listeners) {\n          _this8.listeners.forEach(function (_ref2) {\n            var listener = _ref2.listener;\n            listener(_this8.currentResult);\n          });\n        } // Then the cache listeners\n\n\n        if (notifyOptions.cache) {\n          _this8.client.getQueryCache().notify({\n            query: _this8.currentQuery,\n            type: 'observerResultsUpdated'\n          });\n        }\n      });\n    }\n  }]);\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    var value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\n\n\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false;\n  } // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n\n\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData;\n  } // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n\n\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  } // basically, just keep previous properties if nothing changed\n\n\n  return false;\n}\n\nexport { QueryObserver };","map":{"version":3,"mappings":"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","names":["QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","getCurrentResult","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","_fetchOptions$cancelR","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","refetchInterval","data","_this$options$refetch","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","onSettled","listener","Subscribable","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\Users\\91987\\Desktop\\Socialoo\\client\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.trackedProps,\n      )\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}