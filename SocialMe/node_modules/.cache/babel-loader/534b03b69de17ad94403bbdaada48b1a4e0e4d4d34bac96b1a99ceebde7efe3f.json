{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91987\\\\Desktop\\\\Social Media\\\\SocialMedia\\\\client\\\\src\\\\context\\\\darkModeContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\n\n//creating a context API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DarkModeContext = /*#__PURE__*/createContext();\n\n//to use the context API we need this below provider to wrap our application in app.js\nexport const DarkModeContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem(\"darkMode\")) || false); //JSON.parse will return false as boolean not a string\n  //localStorage to check if it was visited before just take value darkMode\n  const toggle = () => {\n    setDarkMode(!darkMode);\n  };\n  useEffect(() => {\n    localStorage.setItem(\"darkMode\", darkMode); //everytime it changes darkMode it just set in localStorage again\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(DarkModeContext.Provider, {\n    value: {\n      darkMode,\n      toggle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(DarkModeContextProvider, \"GW4r6zdE6GkKVDLeJ9ih728T2Do=\");\n_c = DarkModeContextProvider;\nvar _c;\n$RefreshReg$(_c, \"DarkModeContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","jsxDEV","_jsxDEV","DarkModeContext","DarkModeContextProvider","_ref","_s","children","darkMode","setDarkMode","JSON","parse","localStorage","getItem","toggle","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91987/Desktop/Social Media/SocialMedia/client/src/context/darkModeContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n//creating a context API\r\nexport const DarkModeContext = createContext();\r\n\r\n//to use the context API we need this below provider to wrap our application in app.js\r\nexport const DarkModeContextProvider = ({children}) => {\r\n    const[darkMode,setDarkMode] = useState(\r\n        JSON.parse(localStorage.getItem(\"darkMode\")) || false);     //JSON.parse will return false as boolean not a string\r\n                                                                    //localStorage to check if it was visited before just take value darkMode\r\n    const toggle = () =>{\r\n        setDarkMode(!darkMode)\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        localStorage.setItem(\"darkMode\",darkMode)    //everytime it changes darkMode it just set in localStorage again\r\n    },[darkMode]);\r\n\r\n    return(\r\n        <DarkModeContext.Provider value ={{darkMode, toggle}}>\r\n            {children}\r\n        </DarkModeContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,eAAe,gBAAGL,aAAa,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMM,uBAAuB,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAC9C,MAAK,CAACG,QAAQ,EAACC,WAAW,CAAC,GAAGT,QAAQ,CAClCU,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAK;EACA;EAChE,MAAMC,MAAM,GAAGA,CAAA,KAAK;IAChBL,WAAW,CAAC,CAACD,QAAQ,CAAC;EAC1B,CAAC;EAEDT,SAAS,CAAC,MAAI;IACVa,YAAY,CAACG,OAAO,CAAC,UAAU,EAACP,QAAQ,CAAC,EAAI;EACjD,CAAC,EAAC,CAACA,QAAQ,CAAC,CAAC;EAEb,oBACIN,OAAA,CAACC,eAAe,CAACa,QAAQ;IAACC,KAAK,EAAG;MAACT,QAAQ;MAAEM;IAAM,CAAE;IAAAP,QAAA,EAChDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAACf,EAAA,CAjBWF,uBAAuB;AAAAkB,EAAA,GAAvBlB,uBAAuB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}