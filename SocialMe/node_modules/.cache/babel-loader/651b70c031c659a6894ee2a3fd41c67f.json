{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\n\nfunction useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n      _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n      filters = _parseFilterArgs2[0],\n      _parseFilterArgs2$ = _parseFilterArgs2[1],\n      options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}\n\nexport { useIsFetching };","map":{"version":3,"mappings":";;;;;;;;AAiBO;AAKL;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASD","names":[],"sources":["C:\\Users\\91987\\Desktop\\Socialoo\\client\\node_modules\\@tanstack\\react-query\\src\\useIsFetching.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\nimport type { QueryFilters, QueryKey } from '@tanstack/query-core'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}