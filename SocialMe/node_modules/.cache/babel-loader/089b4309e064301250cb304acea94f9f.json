{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"pageParam\"],\n    _excluded2 = [\"pageParam\"];\nimport { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nvar InfiniteQueryObserver = /*#__PURE__*/function (_QueryObserver) {\n  _inherits(InfiniteQueryObserver, _QueryObserver);\n\n  var _super = _createSuper(InfiniteQueryObserver);\n\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  function InfiniteQueryObserver(client, options) {\n    _classCallCheck(this, InfiniteQueryObserver);\n\n    return _super.call(this, client, options);\n  }\n\n  _createClass(InfiniteQueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"bindMethods\", this).call(this);\n\n      this.fetchNextPage = this.fetchNextPage.bind(this);\n      this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"setOptions\", this).call(this, _objectSpread(_objectSpread({}, options), {}, {\n        behavior: infiniteQueryBehavior()\n      }), notifyOptions);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      options.behavior = infiniteQueryBehavior();\n      return _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"getOptimisticResult\", this).call(this, options);\n    }\n  }, {\n    key: \"fetchNextPage\",\n    value: function fetchNextPage() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          pageParam = _ref.pageParam,\n          options = _objectWithoutProperties(_ref, _excluded);\n\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: 'forward',\n            pageParam: pageParam\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"fetchPreviousPage\",\n    value: function fetchPreviousPage() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          pageParam = _ref2.pageParam,\n          options = _objectWithoutProperties(_ref2, _excluded2);\n\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: 'backward',\n            pageParam: pageParam\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n\n      var state = query.state;\n\n      var result = _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"createResult\", this).call(this, query, options);\n\n      var isFetching = result.isFetching,\n          isRefetching = result.isRefetching;\n      var isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward';\n      var isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward';\n      return _objectSpread(_objectSpread({}, result), {}, {\n        fetchNextPage: this.fetchNextPage,\n        fetchPreviousPage: this.fetchPreviousPage,\n        hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n        hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n        isFetchingNextPage: isFetchingNextPage,\n        isFetchingPreviousPage: isFetchingPreviousPage,\n        isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n      });\n    }\n  }]);\n\n  return InfiniteQueryObserver;\n}(QueryObserver);\n\nexport { InfiniteQueryObserver };","map":{"version":3,"mappings":";;;;;;;;;;;;;IAuBaA,qB;;;;;AAaX;AAKA;AAGA;AAKA;AACAC,iCACEC,MADFD,EAEEE,OAFFF,EASE;AAAA;;AAAA,6BACMC,MADN,EACcC,OADd;AAED;;;;WAESC,uBAAoB;AAC5B;;AACA,WAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,WAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;;WAEDE,oBACEL,OADFK,EAQEC,aARFD,EASQ;AACN,4HAEOL,OAFP;AAGIO,gBAAQ,EAAEC,qBAAqB;AAHnC,UAKEF,aALF;AAOD;;;WAEDG,6BACET,OADFS,EAQ8C;AAC5CT,aAAO,CAACO,QAARP,GAAmBQ,qBAAqB,EAAxCR;AACA,4GAAiCA,OAAjC;AAID;;;WAEDE,yBAEE;AAAA,qFAF8D,EAE9D;AAAA,UAFcQ,SAEd,QAFcA,SAEd;AAAA,UAF4BV,OAE5B;;AACA,aAAO,KAAKW,KAAL,iCACFX,OADE;AAELY,YAAI,EAAE;AACJC,mBAAS,EAAE;AAAEC,qBAAS,EAAE,SAAb;AAAwBJ;AAAxB;AADP;AAFD,SAAP;AAMD;;;WAEDN,6BAKE;AAAA,sFAF4B,EAE5B;AAAA,UAJAM,SAIA,SAJAA,SAIA;AAAA,UAHGV,OAGH;;AACA,aAAO,KAAKW,KAAL,iCACFX,OADE;AAELY,YAAI,EAAE;AACJC,mBAAS,EAAE;AAAEC,qBAAS,EAAE,UAAb;AAAyBJ;AAAzB;AADP;AAFD,SAAP;AAMD;;;WAESK,sBACRC,KADQD,EAERf,OAFQe,EASoC;AAAA;;AAC5C,UAAQE,KAAR,GAAkBD,KAAlB,CAAQC,KAAR;;AACA,UAAMC,MAAM,2FAAsBF,KAAtB,EAA6BhB,OAA7B,CAAZ;;AAEA,UAAQmB,UAAR,GAAqCD,MAArC,CAAQC,UAAR;AAAA,UAAoBC,YAApB,GAAqCF,MAArC,CAAoBE,YAApB;AAEA,UAAMC,kBAAkB,GACtBF,UAAU,IAAI,0BAAK,CAACG,SAANL,KAAiBJ,IAAjBI,GAAiBJ,MAAjBI,GAAiBJ,wDAAWC,IAAXD,GAAWC,MAAXD,GAAWC,+BAA5B,MAA0C,SAD1D;AAGA,UAAMS,sBAAsB,GAC1BJ,UAAU,IAAI,2BAAK,CAACG,SAANL,KAAiBJ,IAAjBI,GAAiBJ,MAAjBI,GAAiBJ,yDAAWC,IAAXD,GAAWC,MAAXD,GAAWC,+BAA5B,MAA0C,UAD1D;AAGA,6CACKI,MADL;AAEEhB,qBAAa,EAAE,KAAKA,aAFtB;AAGEE,yBAAiB,EAAE,KAAKA,iBAH1B;AAIEoB,mBAAW,EAAEA,WAAW,CAACxB,OAAD,iBAAUiB,KAAK,CAACQ,IAAhB,qBAAUC,WAAYC,MAAtB,CAJ1B;AAKEC,uBAAe,EAAEA,eAAe,CAAC5B,OAAD,kBAAUiB,KAAK,CAACQ,IAAhB,qBAAUI,YAAYF,MAAtB,CALlC;AAMEN,0BANK,EAMLA,kBANF;AAOEE,8BAPK,EAOLA,sBAPF;AAQEH,oBAAY,EACVA,YAAY,IAAI,CAACC,kBAAjBD,IAAuC,CAACG;AAT5C;AAWD;;;;EApIOO,a","names":["InfiniteQueryObserver","constructor","client","options","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","pageParam","fetch","meta","fetchMore","direction","createResult","query","state","result","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","hasNextPage","data","_state$data","pages","hasPreviousPage","_state$data2","QueryObserver"],"sources":["C:\\Users\\91987\\Desktop\\Socialoo\\client\\node_modules\\@tanstack\\query-core\\src\\infiniteQueryObserver.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}