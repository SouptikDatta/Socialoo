{"ast":null,"code":"import _objectSpread from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/91987/Desktop/Socialoo/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs'; // CLASS\n\nvar QueryClient = /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, QueryClient);\n\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this = this;\n\n      this.mountCount++;\n      if (this.mountCount !== 1) return;\n      this.unsubscribeFocus = focusManager.subscribe(function () {\n        if (focusManager.isFocused()) {\n          _this.resumePausedMutations();\n\n          _this.queryCache.onFocus();\n        }\n      });\n      this.unsubscribeOnline = onlineManager.subscribe(function () {\n        if (onlineManager.isOnline()) {\n          _this.resumePausedMutations();\n\n          _this.queryCache.onOnline();\n        }\n      });\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n      this.mountCount--;\n      if (this.mountCount !== 0) return;\n      (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n      this.unsubscribeFocus = undefined;\n      (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n      this.unsubscribeOnline = undefined;\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n          filters = _parseFilterArgs2[0];\n\n      filters.fetchStatus = 'fetching';\n      return this.queryCache.findAll(filters).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return this.mutationCache.findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetching: true\n      })).length;\n    }\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey, filters) {\n      var _this$queryCache$find;\n\n      return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n    }\n  }, {\n    key: \"ensureQueryData\",\n    value: function ensureQueryData(arg1, arg2, arg3) {\n      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n      var cachedData = this.getQueryData(parsedOptions.queryKey);\n      return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(queryKeyOrFilters) {\n      return this.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref2) {\n        var queryKey = _ref2.queryKey,\n            state = _ref2.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var query = this.queryCache.find(queryKey);\n      var prevData = query == null ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n\n      if (typeof data === 'undefined') {\n        return undefined;\n      }\n\n      var parsedOptions = parseQueryArgs(queryKey);\n      var defaultedOptions = this.defaultQueryOptions(parsedOptions);\n      return this.queryCache.build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(queryKeyOrFilters, updater, options) {\n      var _this2 = this;\n\n      return notifyManager.batch(function () {\n        return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function (_ref3) {\n          var queryKey = _ref3.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey, filters) {\n      var _this$queryCache$find2;\n\n      return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n          filters = _parseFilterArgs4[0];\n\n      var queryCache = this.queryCache;\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(arg1, arg2, arg3) {\n      var _this3 = this;\n\n      var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3),\n          _parseFilterArgs6 = _slicedToArray(_parseFilterArgs5, 2),\n          filters = _parseFilterArgs6[0],\n          options = _parseFilterArgs6[1];\n\n      var queryCache = this.queryCache;\n\n      var refetchFilters = _objectSpread({\n        type: 'active'\n      }, filters);\n\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries(arg1, arg2, arg3) {\n      var _this4 = this;\n\n      var _parseFilterArgs7 = parseFilterArgs(arg1, arg2, arg3),\n          _parseFilterArgs8 = _slicedToArray(_parseFilterArgs7, 2),\n          filters = _parseFilterArgs8[0],\n          _parseFilterArgs8$ = _parseFilterArgs8[1],\n          cancelOptions = _parseFilterArgs8$ === void 0 ? {} : _parseFilterArgs8$;\n\n      if (typeof cancelOptions.revert === 'undefined') {\n        cancelOptions.revert = true;\n      }\n\n      var promises = notifyManager.batch(function () {\n        return _this4.queryCache.findAll(filters).map(function (query) {\n          return query.cancel(cancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries(arg1, arg2, arg3) {\n      var _this5 = this;\n\n      var _parseFilterArgs9 = parseFilterArgs(arg1, arg2, arg3),\n          _parseFilterArgs10 = _slicedToArray(_parseFilterArgs9, 2),\n          filters = _parseFilterArgs10[0],\n          options = _parseFilterArgs10[1];\n\n      return notifyManager.batch(function () {\n        var _ref, _filters$refetchType;\n\n        _this5.queryCache.findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n\n        if (filters.refetchType === 'none') {\n          return Promise.resolve();\n        }\n\n        var refetchFilters = _objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n        });\n\n        return _this5.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries(arg1, arg2, arg3) {\n      var _this6 = this;\n\n      var _parseFilterArgs11 = parseFilterArgs(arg1, arg2, arg3),\n          _parseFilterArgs12 = _slicedToArray(_parseFilterArgs11, 2),\n          filters = _parseFilterArgs12[0],\n          options = _parseFilterArgs12[1];\n\n      var promises = notifyManager.batch(function () {\n        return _this6.queryCache.findAll(filters).filter(function (query) {\n          return !query.isDisabled();\n        }).map(function (query) {\n          var _options$cancelRefetc;\n\n          return query.fetch(undefined, _objectSpread(_objectSpread({}, options), {}, {\n            cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n            meta: {\n              refetchPage: filters.refetchPage\n            }\n          }));\n        });\n      });\n      var promise = Promise.all(promises).then(noop);\n\n      if (!(options != null && options.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n\n      return promise;\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(arg1, arg2, arg3) {\n      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n      var defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n      if (typeof defaultedOptions.retry === 'undefined') {\n        defaultedOptions.retry = false;\n      }\n\n      var query = this.queryCache.build(this, defaultedOptions);\n      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(arg1, arg2, arg3) {\n      return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(arg1, arg2, arg3) {\n      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n      parsedOptions.behavior = infiniteQueryBehavior();\n      return this.fetchQuery(parsedOptions);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(arg1, arg2, arg3) {\n      return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      return this.mutationCache.resumePausedMutations();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return this.queryCache;\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return this.mutationCache;\n    }\n  }, {\n    key: \"getLogger\",\n    value: function getLogger() {\n      return this.logger;\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return this.defaultOptions;\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      this.defaultOptions = options;\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      var result = this.queryDefaults.find(function (x) {\n        return hashQueryKey(queryKey) === hashQueryKey(x.queryKey);\n      });\n\n      if (result) {\n        result.defaultOptions = options;\n      } else {\n        this.queryDefaults.push({\n          queryKey: queryKey,\n          defaultOptions: options\n        });\n      }\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      if (!queryKey) {\n        return undefined;\n      } // Get the first matching defaults\n\n\n      var firstMatchingDefaults = this.queryDefaults.find(function (x) {\n        return partialMatchKey(queryKey, x.queryKey);\n      }); // Additional checks and error in dev mode\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Retrieve all matching defaults for the given key\n        var matchingDefaults = this.queryDefaults.filter(function (x) {\n          return partialMatchKey(queryKey, x.queryKey);\n        }); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n        if (matchingDefaults.length > 1) {\n          this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n        }\n      }\n\n      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      var result = this.mutationDefaults.find(function (x) {\n        return hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey);\n      });\n\n      if (result) {\n        result.defaultOptions = options;\n      } else {\n        this.mutationDefaults.push({\n          mutationKey: mutationKey,\n          defaultOptions: options\n        });\n      }\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      if (!mutationKey) {\n        return undefined;\n      } // Get the first matching defaults\n\n\n      var firstMatchingDefaults = this.mutationDefaults.find(function (x) {\n        return partialMatchKey(mutationKey, x.mutationKey);\n      }); // Additional checks and error in dev mode\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Retrieve all matching defaults for the given key\n        var matchingDefaults = this.mutationDefaults.filter(function (x) {\n          return partialMatchKey(mutationKey, x.mutationKey);\n        }); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n        if (matchingDefaults.length > 1) {\n          this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n        }\n      }\n\n      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options != null && options._defaulted) {\n        return options;\n      }\n\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.defaultOptions.queries), this.getQueryDefaults(options == null ? void 0 : options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n\n      if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      } // dependent default values\n\n\n      if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n      }\n\n      if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n        defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n      }\n\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options != null && options._defaulted) {\n        return options;\n      }\n\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.defaultOptions.mutations), this.getMutationDefaults(options == null ? void 0 : options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.queryCache.clear();\n      this.mutationCache.clear();\n    }\n  }]);\n\n  return QueryClient;\n}();\n\nexport { QueryClient };","map":{"version":3,"mappings":"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","names":["QueryClient","constructor","config","queryCache","QueryCache","mutationCache","MutationCache","logger","defaultLogger","defaultOptions","queryDefaults","mutationDefaults","mountCount","process","env","NODE_ENV","error","mount","unsubscribeFocus","focusManager","subscribe","isFocused","resumePausedMutations","onFocus","unsubscribeOnline","onlineManager","isOnline","onOnline","unmount","undefined","isFetching","arg1","arg2","parseFilterArgs","filters","fetchStatus","findAll","length","isMutating","fetching","getQueryData","queryKey","find","_this$queryCache$find","state","data","ensureQueryData","arg3","parsedOptions","parseQueryArgs","cachedData","Promise","resolve","fetchQuery","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","updater","options","query","prevData","functionalUpdate","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","notifyManager","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","revert","promises","cancel","all","then","noop","catch","invalidateQueries","invalidate","refetchType","_ref","filter","isDisabled","fetch","cancelRefetch","meta","refetchPage","promise","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","infiniteQueryBehavior","prefetchInfiniteQuery","getMutationCache","getLogger","getDefaultOptions","setDefaultOptions","setQueryDefaults","result","x","hashQueryKey","push","getQueryDefaults","firstMatchingDefaults","partialMatchKey","matchingDefaults","JSON","stringify","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","hashQueryKeyByOptions","refetchOnReconnect","networkMode","useErrorBoundary","suspense","defaultMutationOptions","mutations","clear"],"sources":["C:\\Users\\91987\\Desktop\\Socialoo\\client\\node_modules\\@tanstack\\query-core\\src\\queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashQueryKey,\n  hashQueryKeyByOptions,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { defaultLogger } from './logger'\nimport type { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport type { Logger } from './logger'\nimport type { QueryState } from './query'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n  WithRequired,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private mountCount: number\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n    this.mountCount = 0\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\n        `Passing a custom logger has been deprecated and will be removed in the next major version.`,\n      )\n    }\n  }\n\n  mount(): void {\n    this.mountCount++\n    if (this.mountCount !== 1) return\n\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.mountCount--\n    if (this.mountCount !== 0) return\n\n    this.unsubscribeFocus?.()\n    this.unsubscribeFocus = undefined\n\n    this.unsubscribeOnline?.()\n    this.unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TQueryFnData | undefined {\n    return this.queryCache.find<TQueryFnData>(queryKey, filters)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: WithRequired<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | WithRequired<\n          FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n          'queryKey'\n        >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const cachedData = this.getQueryData<TData>(parsedOptions.queryKey!)\n\n    return cachedData\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(parsedOptions)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): TQueryFnData | undefined {\n    const query = this.queryCache.find<TQueryFnData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.queryCache.find<TQueryFnData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}